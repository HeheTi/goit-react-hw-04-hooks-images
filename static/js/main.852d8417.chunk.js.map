{"version":3,"sources":["components/LoaderModal/LoaderModal.module.css","components/LoaderModal/LoaderModal.jsx","components/Searchbar/Searchbar.jsx","components/ImageGallery/ImageGalleryItem/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.jsx","components/Modal/Modal.jsx","components/Button/Button.jsx","api/api.js","components/App/App.jsx","index.js"],"names":["module","exports","loaderRef","document","querySelector","LoaderModal","createPortal","className","s","loader","type","color","height","width","timeout","Searchbar","state","serchName","onChangeSerchName","e","setState","target","value","onSubmitForm","preventDefault","props","onSubmit","resetForm","this","autoComplete","autoFocus","onChange","placeholder","Component","ImageGalleryItem","srcImg","tags","onClick","src","alt","ImageGallery","pictures","onClickImage","map","webformatURL","largeImageURL","modalRef","Modal","onCloseModal","data","useLockBodyScroll","useEffect","onEscPress","code","window","addEventListener","removeEventListener","currentTarget","bigImg","Button","BASE_URL","API_KEY","process","App","useState","setPictures","dataModal","setDataModal","serchD","setSerchD","isLoading","setIsLoading","isModalOpen","setIsModalOpen","page","setPage","isShowBtn","setIsShowBtn","fetchImages","serch","url","fetch","then","response","ok","json","Promise","reject","Error","fetchImagesApi","totalHits","hits","totalPages","Math","ceil","normalizeDate","toast","info","autoClose","success","prevState","delay","catch","err","error","message","finally","isFirstLOading","name","warn","resetForNewSerch","length","prevPage","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.852d8417.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"LoaderModal_loader__2n25p\"};","import React from 'react';\nimport { createPortal } from 'react-dom';\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nimport s from './LoaderModal.module.css';\n\nconst loaderRef = document.querySelector('#loader-root');\n\nconst LoaderModal = () => {\n  return createPortal(\n    <div className={s.loader}>\n      <Loader\n        type=\"Oval\"\n        color=\"#3f51b5\"\n        height={120}\n        width={120}\n        timeout={0}\n      />\n    </div>,\n    loaderRef,\n  );\n};\n\nexport default LoaderModal;\n","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nclass Searchbar extends Component {\n  state = {\n    serchName: '',\n  };\n\n  onChangeSerchName = e => this.setState({ serchName: e.target.value });\n\n  onSubmitForm = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state.serchName);\n    this.resetForm();\n  };\n\n  resetForm = () => this.setState({ serchName: '' });\n\n  render() {\n    const { serchName } = this.state;\n\n    return (\n      <header className=\"Searchbar\">\n        <form onSubmit={this.onSubmitForm} className=\"SearchForm\">\n          <button type=\"submit\" className=\"SearchForm-button\">\n            <span className=\"SearchForm-button-label\">Search</span>\n          </button>\n\n          <input\n            className=\"SearchForm-input\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            onChange={this.onChangeSerchName}\n            placeholder=\"Search images and photos\"\n            value={serchName}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import PropTypes from 'prop-types';\n\nconst ImageGalleryItem = ({ srcImg, tags, onClick }) => {\n  return (\n    <li onClick={onClick} className=\"ImageGalleryItem\">\n      <img className=\"ImageGalleryItem-image\" src={srcImg} alt={tags} />\n    </li>\n  );\n};\n\nImageGalleryItem.propTypes = {\n  srcImg: PropTypes.string,\n  tags: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ImageGalleryItem;\n","import PropTypes from 'prop-types';\nimport ImageGalleryItem from './ImageGalleryItem';\n\nconst ImageGallery = ({ pictures, onClickImage }) => {\n  return (\n    <ul className=\"ImageGallery\">\n      {pictures.map(({ webformatURL, largeImageURL, tags }) => (\n        <ImageGalleryItem\n          key={webformatURL}\n          onClick={() => onClickImage(largeImageURL, tags)}\n          srcImg={webformatURL}\n          tags={tags}\n        />\n      ))}\n    </ul>\n  );\n};\n\nImageGallery.propTypes = {\n  pictures: PropTypes.array,\n  onClickImage: PropTypes.func,\n};\n\nexport default ImageGallery;\n","import { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { useLockBodyScroll } from \"react-use\";\n\nimport PropTypes from \"prop-types\";\n\nconst modalRef = document.querySelector(\"#modal-root\");\n\nconst Modal = ({ onCloseModal, data }) => {\n  useLockBodyScroll(true);\n\n  useEffect(() => {\n    const onEscPress = (e) => {\n      if (e.code === \"Escape\") {\n        onCloseModal();\n      }\n    };\n\n    window.addEventListener(\"keydown\", onEscPress);\n\n    return () => {\n      window.removeEventListener(\"keydown\", onEscPress);\n    };\n  }, [onCloseModal]);\n\n  const onclickBackdrop = (e) => {\n    if (e.target === e.currentTarget) {\n      onCloseModal();\n    }\n  };\n\n  return createPortal(\n    <div className=\"Overlay\" onClick={onclickBackdrop}>\n      <div className=\"modal\">\n        <img src={data.bigImg} alt={data.tags} />\n      </div>\n    </div>,\n    modalRef\n  );\n};\n\nModal.propTypes = {\n  bigImg: PropTypes.string,\n  tags: PropTypes.string,\n};\n\nexport default Modal;\n","import PropTypes from 'prop-types';\n\nfunction Button({ onClick }) {\n  return (\n    <button onClick={onClick} className=\"Button\">\n      Load more\n    </button>\n  );\n}\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","const BASE_URL = 'https://pixabay.com/api/';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nfunction fetchImagesApi(serchName, page = 1) {\n  const url = `${BASE_URL}?q=${serchName}&key=${API_KEY}&page=${page}&image_type=photo&orientation=horizontal&per_page=12`;\n  return fetch(url).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject(new Error(`Something went wrong`));\n  });\n}\n\nexport { fetchImagesApi };\n","import React, { useState, useEffect } from \"react\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport LoaderModal from \"../LoaderModal/LoaderModal\";\nimport Searchbar from \"../Searchbar\";\nimport ImageGallery from \"../ImageGallery\";\nimport Modal from \"../Modal\";\nimport Button from \"../Button\";\nimport { fetchImagesApi } from \"../../api/api.js\";\n\nconst App = () => {\n  const [pictures, setPictures] = useState([]);\n  const [dataModal, setDataModal] = useState(null);\n  const [serchD, setSerchD] = useState(\"nature\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [page, setPage] = useState(1);\n  const [isShowBtn, setIsShowBtn] = useState(false);\n\n  const perPage = 12;\n\n  useEffect(() => {\n    const fetchImages = (serch, page) => {\n      fetchImagesApi(serch, page)\n        .then(({ totalHits, hits }) => {\n          const totalPages = Math.ceil(totalHits / perPage);\n\n          const normalizeDate = hits.map(\n            ({ webformatURL, largeImageURL, tags }) => ({\n              webformatURL,\n              largeImageURL,\n              tags,\n            })\n          );\n\n          if (totalHits < 1) {\n            toast.info(`Sorry, no picture about ${serch}`, { autoClose: 2500 });\n          }\n\n          if (totalHits > 0 && page === 1) {\n            toast.success(\n              `Found picture about ${serch ? serch : \"everithing\"}`,\n              {\n                autoClose: 2500,\n              }\n            );\n          }\n\n          setPictures((prevState) => [...prevState, ...normalizeDate]);\n\n          if (totalPages > 1) {\n            setIsShowBtn(true);\n          }\n\n          if (totalPages === page) {\n            toast.info(`Dont have more picture about ${serch}`, {\n              autoClose: 2500,\n              delay: 1500,\n            });\n            setIsShowBtn(false);\n            return false;\n          }\n        })\n        .catch((err) => toast.error(err.message, { autoClose: 2500 }))\n        .finally(() => setIsLoading(false));\n    };\n\n    let isFirstLOading = true;\n\n    if (isFirstLOading) {\n      setIsLoading(true);\n      fetchImages(serchD, page);\n      isFirstLOading = false;\n      return;\n    }\n\n    fetchImages(serchD, page);\n  }, [page, serchD]);\n\n  const onenModal = () => setIsModalOpen(true);\n  const onCloseModal = () => {\n    setIsModalOpen(false);\n    setDataModal(null);\n  };\n\n  const onTakeBigPict = (bigImg, tags) => {\n    const obj = { bigImg, tags };\n\n    setDataModal(obj);\n    onenModal();\n  };\n\n  const onLoadMore = () => {\n    toast.info(\n      `Uploading more pictures about ${serchD ? serchD : \"everything \"}  ♥`,\n      { autoClose: 1500 }\n    );\n\n    setPage((prevPage) => prevPage + 1);\n    setIsLoading(true);\n  };\n\n  const resetForNewSerch = (name) => {\n    setSerchD(name);\n    setPage(1);\n    setPictures([]);\n    setIsShowBtn(false);\n    setIsLoading(true);\n  };\n\n  const onTakeDataForSerch = (name) => {\n    if (serchD === name) {\n      toast.warn(\n        `You look picture  about ${\n          serchD ? serchD : \"everything\"\n        } now ;) Search something else!`,\n        { autoClose: 3000 }\n      );\n      return false;\n    }\n\n    return resetForNewSerch(name);\n  };\n\n  return (\n    <div className=\"App\">\n      <Searchbar onSubmit={onTakeDataForSerch} />\n\n      {isLoading && <LoaderModal />}\n\n      {pictures.length > 0 && (\n        <ImageGallery pictures={pictures} onClickImage={onTakeBigPict} />\n      )}\n\n      {isModalOpen && <Modal data={dataModal} onCloseModal={onCloseModal} />}\n\n      {isShowBtn && <Button onClick={onLoadMore} />}\n      <ToastContainer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport './index.css';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}